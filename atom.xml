<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chino&#39;s Workspace</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chinomars.github.io/"/>
  <updated>2020-02-07T08:48:33.459Z</updated>
  <id>https://chinomars.github.io/</id>
  
  <author>
    <name>Chino Mars</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>REPL技术分析——Swift REPL模式</title>
    <link href="https://chinomars.github.io/2020/02/07/REPL%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E2%80%94%E2%80%94Swift-REPL%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chinomars.github.io/2020/02/07/REPL%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E2%80%94%E2%80%94Swift-REPL%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-07T08:45:43.000Z</published>
    <updated>2020-02-07T08:48:33.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h3><p>在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能力，并可基于llvm ir进行表达式eval，通过JIT的方式在解释器中支持REPL。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ol><li><p>头文件：<code>include/swift/Immediate/Immediate.h</code>，包含两个接口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RunImmediately</span><span class="params">(CompilerInstance &amp;CI, <span class="keyword">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">const</span> IRGenOptions &amp;IRGenOpts, <span class="keyword">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runREPL</span><span class="params">(CompilerInstance &amp;CI, <span class="keyword">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">bool</span> ParseStdlib)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>RunImmediately方法用于基于<strong>SIL（Swift Intermediate Language）</strong>，立即Eval当前IR Module，相当于是解释器</li><li>runREPL方法提供给FrontendTool.cpp前端逻辑进行调用，作为REPL的main loop</li></ul></li><li><p>源码文件：Immediate.cpp</p></li></ol><p>实现几个功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">loadSwiftRuntime</span><span class="params">(ArrayRef&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; runtimeLibPaths)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">tryLoadLibraries</span><span class="params">(ArrayRef&lt;LinkLibrary&gt; LinkLibraries,</span></span></span><br><span class="line"><span class="function"><span class="params">                      SearchPathOptions SearchPathOpts,</span></span></span><br><span class="line"><span class="function"><span class="params">                      DiagnosticEngine &amp;Diags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">linkLLVMModules</span><span class="params">(llvm::Module *Module,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;llvm::Module&gt; SubModule)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">autolinkImportedModules</span><span class="params">(ModuleDecl *M, <span class="keyword">const</span> IRGenOptions &amp;IRGenOpts)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swift::RunImmediately</span><span class="params">(CompilerInstance &amp;CI,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> IRGenOptions &amp;IRGenOpts,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>加载swift编译器runtime：swiftCore</li><li>llvm ir module间合并</li><li>import module的支持</li><li>RunImmediately：将input翻译成llvm ir，调用<code>llvm::ExecutionEngine</code>直接执行llvm ir</li></ul><ol start="3"><li>源码文件：REPL.cpp</li></ol><p>REPL的主函数，从Frontend.cpp进来，主要由一个读取用户input的main loop，对每个输入进行处理。依赖histedit的支持</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="https://github.com/apple/swift/blob/master/lib/Immediate/Immediate.cpp" target="_blank" rel="noopener">Source Code Immediate.cpp</a></p><p><a href="https://github.com/apple/swift/blob/master/lib/Immediate/REPL.cpp" target="_blank" rel="noopener">Source Code REPL.cpp</a></p><p><a href="http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libedit/histedit.h" target="_blank" rel="noopener">histedit.h: Line editor and history interface.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;技术路线&quot;&gt;&lt;a href=&quot;#技术路线&quot; class=&quot;headerlink&quot; title=&quot;技术路线&quot;&gt;&lt;/a&gt;技术路线&lt;/h3&gt;&lt;p&gt;在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能
      
    
    </summary>
    
    
    
      <category term="Swift" scheme="https://ChinoMars.github.io/tags/Swift/"/>
    
      <category term="Compiler" scheme="https://ChinoMars.github.io/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo和github page搭建个人博客</title>
    <link href="https://chinomars.github.io/2020/01/29/%E5%9F%BA%E4%BA%8EHexo%E5%92%8Cgithub-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://chinomars.github.io/2020/01/29/%E5%9F%BA%E4%BA%8EHexo%E5%92%8Cgithub-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-01-29T11:46:47.000Z</published>
    <updated>2020-01-30T06:26:03.234Z</updated>
    
    <content type="html"><![CDATA[<p>倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前个人比较喜欢的一款模版。</p><p>废话不多说，按照个人习惯，分四段简单介绍下如何基于Hexo和Github Page搭建个人主页。</p><blockquote><p>本文不严格区分*nix系统和windows系统，所有命令均可在terminal或者gitbash中执行。</p></blockquote><h2 id="0x00-准备"><a href="#0x00-准备" class="headerlink" title="0x00 准备"></a>0x00 准备</h2><p>hexo是一个静态站点生成工具，集创建（初始化站点）、开发（指的是写博客）、发布博客文章功能于一体，十分方便。</p><p>搭建博客站点先准备以下平台的账号和开发环境：</p><ul><li><p>注册github账户，<a href="https://github.com/" target="_blank" rel="noopener">链接</a></p></li><li><p>安装git，并在github账户中配置sshkey：*nix系统一般自带git，windows系统安装gitbash，<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a></p></li><li><p>配置sshkey：</p><ul><li><p>生成sshkey：*nix系统中打开terminal，windows系统中打开gitbash，参考<a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">教程</a>，执行以下命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span> <span class="comment"># your_email@example.com替换为你注册github的邮箱，可以一直按回车生成默认的文件名，方便阅读后续的步骤</span></span><br></pre></td></tr></table></figure></li><li><p>执行以下命令，拷贝出你的public key，将屏幕中输出的公钥内容<code>ctrl+c</code>进行拷贝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/ &amp;&amp; cat id_rsa.pub <span class="comment"># 这里的id_rsa.pub为上一步生成的密钥对中的公钥</span></span><br></pre></td></tr></table></figure></li><li><p>打开github中配置sshkey的界面，<a href="https://github.com/settings/keys" target="_blank" rel="noopener">链接</a>，选择<code>New SSH key</code>，把拷贝的公钥配置上去即可。</p></li></ul></li><li><p>安装Nodejs，<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载地址</a>，安装成功后会同时安装好node和npm两个工具，并为npm配置国内源，例如配置淘宝源可以执行下述命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装hexo，执行下述命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g <span class="comment"># install hexo</span></span><br><span class="line">hexo -v <span class="comment"># check whether successfully installed</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="0x01-初始化站点"><a href="#0x01-初始化站点" class="headerlink" title="0x01 初始化站点"></a>0x01 初始化站点</h2><p>执行以下命令来初始化博客站点，会创建一个新的目录，以blog-dev为例，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-dev</span><br></pre></td></tr></table></figure><p>待命令执行完毕，会新建一个blog-dev目录，进入该目录中，我们可以看到以下目录树：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">blog-dev</span><br><span class="line">├── _config.yml        <span class="comment">#---------------- 站点配置文件</span></span><br><span class="line">├── node_modules       <span class="comment">#---------------- npm安装包本地保存目录</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json       <span class="comment">#---------------- 依赖包配置文件</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span>             <span class="comment">#---------------- 博客文章保存目录</span></span><br><span class="line">└── themes             <span class="comment">#---------------- 博客主题保存目录</span></span><br></pre></td></tr></table></figure><p>此时，进入到blog-dev目录，可以执行hexo的相关参数及命令，可以进行站点的管理，简单介绍如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo generate <span class="comment"># 生成网站静态文件</span></span><br><span class="line">hexo server <span class="comment"># 启动本地调试模式，默认可以打开localhost:4000查看网站效果</span></span><br><span class="line">hexo deploy <span class="comment"># 发布到GitHub Page，第0x11节会具体介绍</span></span><br></pre></td></tr></table></figure><p>hexo还有一个非常方便的点是主题套用十分方便，将想要的模板下载下来，放到themes目录下，然后修改_config.yml文件中的theme字段，改为下载下来的主题目录名即可。主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方网站下载</a>，也可以自行从各种渠道获取。</p><h2 id="0x10-创建github-page"><a href="#0x10-创建github-page" class="headerlink" title="0x10 创建github page"></a>0x10 创建github page</h2><p>本节内容大家应该都比较熟悉，创建作为个人主页用的github page，必须将仓名命名为username.github.com，经过测试，仓名中的username与你的github账号名可以不区分大小写。</p><p>这部分教程我想偷懒跳过了，可以自行查看<a href="https://pages.github.com/" target="_blank" rel="noopener">官方教程</a>。</p><h2 id="0x11-预览和发布"><a href="#0x11-预览和发布" class="headerlink" title="0x11 预览和发布"></a>0x11 预览和发布</h2><p>在blog-dev目录下执行<code>hexo new &#39;博客标题&#39;</code>即可创建一篇新的博客，使用markdown语法进行编辑。</p><p>编辑完毕之后，执行下述命令，可以启动一个本地的临时服务器进行预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment"># 启动本地预览服务</span></span><br></pre></td></tr></table></figure><p>在浏览器中打开<code>localhost:4000</code>，即可预览你的博客。</p><p>配置blog-dev的发布路径，编辑blog-dev/_config.yml文件，一般在文件末尾，有一个deploy字段，把第三节创建的github page仓库路径配置上去即可，如果deploy字段下只有一个type，则手动添加其他字段（注意yml文件遵从yaml格式缩紧）。例如我的配置就是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span>                                                                                                          </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ChinoMars/chinomars.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>依次执行下述命令，即可发布你的静态站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo generate <span class="comment"># 生成站点的静态文件</span></span><br><span class="line">hexo deploy <span class="comment"># 自动push到github page所在的master分支，进行发布</span></span><br></pre></td></tr></table></figure><p>最后，可以打开网址：<code>https://username.github.io</code>即可查看个人的站点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前
      
    
    </summary>
    
    
    
      <category term="小白" scheme="https://ChinoMars.github.io/tags/%E5%B0%8F%E7%99%BD/"/>
    
  </entry>
  
</feed>
